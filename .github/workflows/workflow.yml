name: "Footy Deployment Pipeline"

on:
    push: 
        branches: 
            - main
            - development
            - tevlen/deploy

jobs:
    terraform:
        name: "Terraform AWS Setup"
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: ./Infrastructure
        steps:
        # Checkout the repository
        - name: "Checkout Code"
          uses: actions/checkout@v4

        # Set up Terraform
        - name: "Set up Terraform"
          uses: hashicorp/setup-terraform@v3
          with:
            terraform_version: 1.5.0

        # Initialise Terraform
        - name: "Terraform Init"
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          run: terraform init -backend-config="backend.config"

        - name: "Create terraform.tfvars"
          run: |
            echo 'db_password = "${{ secrets.DB_PASSWORD }}"' > terraform.tfvars
            echo 'db_username = "${{ secrets.DB_USERNAME }}"' >> terraform.tfvars
            echo 'db_name = "${{ secrets.DB_NAME }}"' >> terraform.tfvars
            echo 'backend_bucket = "${{ secrets.BUCKET_NAME }}"' >> terraform.tfvars
            echo 'backend_key = "${{ secrets.BACKEND_KEY }}"' >> terraform.tfvars
            echo 'project_name = "${{ secrets.PROJECT_NAME }}"' >> terraform.tfvars

        # Validate Terraform configuration
        - name: "Terraform Validate"
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          run: terraform validate

        # Apply Terraform changes
        - name: "Terraform Apply"
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          run: terraform apply -auto-approve

    migrate:
        name: "Run Flyway Migrations"
        runs-on: ubuntu-latest
        needs: terraform
        steps:
            - name: "Checkout Code"
              uses: actions/checkout@v4
              with:
                fetch-depth: 0

            - name: "Run Flyway migrations"
              run: |
                echo "Running Flyway migrations..."
                # Print Flyway version
                docker run --rm flyway/flyway:latest -v
                
                echo "Attempting database connection..."
                docker run --rm \
                -v $(pwd):/flyway/sql \
                flyway/flyway:latest \
                -url=jdbc:postgresql://${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }} \
                -user=${{ secrets.DB_USERNAME }} \
                -password=${{ secrets.DB_PASSWORD }} \
                -connectRetries=3 \
                -connectRetriesInterval=10 \
                info

                echo "Running migrations..."
                docker run --rm \
                -v $(pwd):/flyway/sql \
                flyway/flyway:latest \
                -url=jdbc:postgresql://${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }} \
                -user=${{ secrets.DB_USERNAME }} \
                -password=${{ secrets.DB_PASSWORD }} \
                -connectRetries=3 \
                -connectRetriesInterval=10 \
                -locations=filesystem:/flyway/sql/Migrations \
                migrate

    deploy-frontend:
        name: "Deploy Frontend to GitHub Pages"
        runs-on: ubuntu-latest
        needs: migrate
        steps:
            - name: "Checkout Code"
              uses: actions/checkout@v4

            - name: "Setup Node.js"
              uses: actions/setup-node@v4
              with:
                node-version: 'lts/*'
                cache: 'npm'

            - name: "Install Dependencies"
              run: |
                cd public
                npm install

            - name: "Build Frontend"
              run: |
                cd public
                npm run build
              env:
                VITE_API_URL: ${{ secrets.VITE_API_URL }}
                VITE_GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}

            - name: "Deploy to GitHub Pages"
              uses: peaceiris/actions-gh-pages@v3
              with:
                github_token: ${{ secrets.GITHUB_TOKEN }}
                publish_dir: ./public/dist
                publish_branch: gh-pages

    deploy-backend:
        name: "Deploy Backend to EC2"
        runs-on: ubuntu-latest
        needs: migrate
        steps:
            - name: "Checkout Code"
              uses: actions/checkout@v4

            - name: "Setup Node.js"
              uses: actions/setup-node@v4
              with:
                node-version: 'lts/*'
                cache: 'npm'

            - name: "Install Dependencies"
              run: npm install

            - name: "Build Backend"
              run: npm run build

            - name: "Configure SSH"
              run: |
                mkdir -p ~/.ssh
                echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/deploy_key
                chmod 600 ~/.ssh/deploy_key
                cat >>~/.ssh/config <<END
                Host ec2
                  HostName ${{ secrets.EC2_HOST }}
                  User ubuntu
                  IdentityFile ~/.ssh/deploy_key
                  StrictHostKeyChecking no
                END

            - name: "Deploy to EC2"
              run: |
                # Create .env file
                cat > .env << EOL
                DB_HOST=${{ secrets.DB_HOST }}
                DB_PORT=${{ secrets.DB_PORT }}
                DB_NAME=${{ secrets.DB_NAME }}
                DB_USERNAME=${{ secrets.DB_USERNAME }}
                DB_PASSWORD=${{ secrets.DB_PASSWORD }}
                GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
                EOL

                # Copy files to EC2
                scp -r dist .env package*.json ec2:/home/ubuntu/footy-api/

                # Run deployment script on EC2
                ssh ec2 'cd /home/ubuntu/footy-api && \
                  npm install --production && \
                  pm2 restart all || pm2 start src/app.ts --name "footy-api"'
